// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: pkv.proto

package pkv

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PkvClient is the client API for Pkv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PkvClient interface {
	Prepare(ctx context.Context, in *PkvRequest, opts ...grpc.CallOption) (*PkvResponse, error)
	Accept(ctx context.Context, in *PkvRequest, opts ...grpc.CallOption) (*PkvResponse, error)
	Commit(ctx context.Context, in *PkvRequest, opts ...grpc.CallOption) (*PkvResponse, error)
}

type pkvClient struct {
	cc grpc.ClientConnInterface
}

func NewPkvClient(cc grpc.ClientConnInterface) PkvClient {
	return &pkvClient{cc}
}

func (c *pkvClient) Prepare(ctx context.Context, in *PkvRequest, opts ...grpc.CallOption) (*PkvResponse, error) {
	out := new(PkvResponse)
	err := c.cc.Invoke(ctx, "/pkv.Pkv/Prepare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pkvClient) Accept(ctx context.Context, in *PkvRequest, opts ...grpc.CallOption) (*PkvResponse, error) {
	out := new(PkvResponse)
	err := c.cc.Invoke(ctx, "/pkv.Pkv/Accept", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pkvClient) Commit(ctx context.Context, in *PkvRequest, opts ...grpc.CallOption) (*PkvResponse, error) {
	out := new(PkvResponse)
	err := c.cc.Invoke(ctx, "/pkv.Pkv/Commit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PkvServer is the server API for Pkv service.
// All implementations must embed UnimplementedPkvServer
// for forward compatibility
type PkvServer interface {
	Prepare(context.Context, *PkvRequest) (*PkvResponse, error)
	Accept(context.Context, *PkvRequest) (*PkvResponse, error)
	Commit(context.Context, *PkvRequest) (*PkvResponse, error)
	mustEmbedUnimplementedPkvServer()
}

// UnimplementedPkvServer must be embedded to have forward compatible implementations.
type UnimplementedPkvServer struct {
}

func (UnimplementedPkvServer) Prepare(context.Context, *PkvRequest) (*PkvResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prepare not implemented")
}
func (UnimplementedPkvServer) Accept(context.Context, *PkvRequest) (*PkvResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Accept not implemented")
}
func (UnimplementedPkvServer) Commit(context.Context, *PkvRequest) (*PkvResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (UnimplementedPkvServer) mustEmbedUnimplementedPkvServer() {}

// UnsafePkvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PkvServer will
// result in compilation errors.
type UnsafePkvServer interface {
	mustEmbedUnimplementedPkvServer()
}

func RegisterPkvServer(s grpc.ServiceRegistrar, srv PkvServer) {
	s.RegisterService(&Pkv_ServiceDesc, srv)
}

func _Pkv_Prepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PkvRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PkvServer).Prepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pkv.Pkv/Prepare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PkvServer).Prepare(ctx, req.(*PkvRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pkv_Accept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PkvRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PkvServer).Accept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pkv.Pkv/Accept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PkvServer).Accept(ctx, req.(*PkvRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pkv_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PkvRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PkvServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pkv.Pkv/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PkvServer).Commit(ctx, req.(*PkvRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Pkv_ServiceDesc is the grpc.ServiceDesc for Pkv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Pkv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pkv.Pkv",
	HandlerType: (*PkvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Prepare",
			Handler:    _Pkv_Prepare_Handler,
		},
		{
			MethodName: "Accept",
			Handler:    _Pkv_Accept_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _Pkv_Commit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkv.proto",
}
